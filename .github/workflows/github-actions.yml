name: "NugetVersionTest"

on:
  push:
    branches: ["master"]
  pull_request:
  release:
    types: ["published"]

permissions:
  contents: read

jobs:
  build:
    name: "NugetVersionTest"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '6.x'
          includePrerelease: true
          preferLatestVersion: true

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0

      - name: Display GitVersion variables (without prefix)
        run: |
          echo "Major: ${{ env.major }}"
          echo "Minor: ${{ env.minor }}"
          echo "Patch: ${{ env.patch }}"
          echo "PreReleaseTag: ${{ env.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ env.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ env.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ env.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ env.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ env.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ env.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ env.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ env.majorMinorPatch }}"
          echo "SemVer: ${{ env.semVer }}"
          echo "LegacySemVer: ${{ env.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ env.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ env.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ env.assemblySemFileVer }}"
          echo "FullSemVer: ${{ env.fullSemVer }}"
          echo "InformationalVersion: ${{ env.informationalVersion }}"
          echo "BranchName: ${{ env.branchName }}"
          echo "EscapedBranchName: ${{ env.escapedBranchName }}"
          echo "Sha: ${{ env.sha }}"
          echo "ShortSha: ${{ env.shortSha }}"
          echo "NuGetVersionV2: ${{ env.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ env.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ env.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ env.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ env.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ env.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ env.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ env.uncommittedChanges }}"
          echo "CommitDate: ${{ env.commitDate }}"

      - name: Build
        run: dotnet build --configuration Release /p:Version=${{ env.nuGetVersionV2 }}
      - name: Test
        run: dotnet test --configuration Release /p:Version=${{ env.nuGetVersionV2 }} --no-build
      - name: Pack
        run: dotnet pack --configuration Release /p:Version=${{ env.nuGetVersionV2 }} --no-build --output .